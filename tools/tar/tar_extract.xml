<tool id="tar_extract" name="Untar" version="0.1.0" profile="21.01">

  <command detect_errors="exit_code"><![CDATA[

mkdir archive
&& cd archive

## Handle .tar.gz
#if $input_tar.is_of_type('tgz'):
  #set $archive_path = '../input.tar.gz'
#else
  #set $archive_path = '../input.tar'
#end if

&& ln '$input_tar' $archive_path

## Potential to include/exclude based on path or filename patterns
&& tar xf $archive_path --transform='$path_re_string'

#if $exclude_hidden_files:
&& rm `ls -fa | grep "^\." | grep -v '^..$' | grep -v '^.$'`
#end if

## Remove empty dirs from extracted archive so they aren't collected
&& rm -r `ls -d */`

## Can we set datatypes explicitly? Sucks that all datasets are output as txt.

  ]]></command>

  <inputs>
    <param
      name="input_tar" type="data" format="tar,tgz" label="Tar archive to extract"
      help="Can be either 'tar' or 'tgz' (.tar.gz) datatype. The archive will
        be flattened and output as a collection. Please note that duplicate file names will not be preserved!"
    />
    <param
      name="exclude_hidden_files" type="boolean" label="Exclude hidden files (.*)"
      default="true" help="Files beginning with '.' will be not be extracted."
    />
    <param
      name="path_re_string" type="boolean" label="Collapse paths into file name"
      default="false" truevalue="s/\//~/g" falsevalue="s/.*\///"
      help='Directory structure will be reflected in file names by joining path
      elements like "dir~subdir~file.txt". This feature can be used to prevent
      duplicate file names from overwriting each other.'
    />
  </inputs>

  <outputs>

    <!-- Potential to output individual datasets? -->

    <collection name="archive_output" type="list" label="Extracted archive">
      <discover_datasets pattern="__name_and_ext__" directory="archive"/>
      <discover_datasets pattern="__name__" directory="archive"/>
    </collection>
  </outputs>

  <tests>
    <!-- Test flat archive -->
    <test>
      <param name="input_tar" ftype="tar" value="test.tar" />
      <output_collection name="archive_output" type="list" count="3">
        <element name="file1">
          <assert_contents>
            <has_text_matching expression="a file with content" />
          </assert_contents>
        </element>
      </output_collection>
    </test>

    <!-- Test archive with one subfolder -->
    <test>
      <param name="input_tar" ftype="tar" value="test_dir.tar" />
      <output_collection name="archive_output" type="list" count="3">
        <element name="file1">
          <assert_contents>
            <has_text_matching expression="a file with content" />
          </assert_contents>
        </element>
      </output_collection>
    </test>

    <!-- Test archive with multiple subfolders and hidden files -->
    <test>
      <param name="input_tar" ftype="tar" value="test_multiple_subdirs_hidden_files.tar" />
      <param name="exclude_hidden_files" value="true" />
      <output_collection name="archive_output" type="list" count="5">
        <element name="file1.fastq">
          <assert_contents>
            <has_text_matching expression="SRR001666.1" />
          </assert_contents>
        </element>
      </output_collection>
    </test>

    <!-- Test flat .tar.gz archive -->
    <test>
      <param name="input_tar" ftype="tgz" value="test.tar.gz" />
      <output_collection name="archive_output" type="list" count="3">
        <element name="file1">
          <assert_contents>
            <has_text_matching expression="a file with content" />
          </assert_contents>
        </element>
      </output_collection>
    </test>
  </tests>

  <help><![CDATA[

**Extract a tar archive**

This tool allows you to extract files from a tar archive and output them to a
collection. The supplied archive will be flattened before the files are
collected, so the internal directory structure will not be preserved.

  ]]></help>
</tool>
